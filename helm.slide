Introduction to Helm

* 
.image images/di.png 600 900

* 
.background images/checkin.png

* What we will cover
- An Intro to Helm
- How Helm is Architected
- Building your First Chart
- Installing and Using the Helm CLI
- A look into more complex template scenarios
- Putting it all together and where to go next

* What is Helm?
Kubernetes Helm is a package manager for Kubernetes, analogous to Yum or Apt. It makes it possible to organize Kubernetes objects in a packaged application that anyone can download and install, or configure to their specific needs. In Helm, these packages are called charts.

When a user installs a Helm chart, Helm deploys a Kubernetes components in the background, as specified in the chartâ€™s configuration.

* Helm is organized around several key concepts:

- Charts: a package of pre-configured Kubernetes resources
- Release: a specific instance of a chart which has been deployed to the cluster using Helm
- Repository: a group of published charts which can be made available to others

Kubernetes Helm was developed by Google and Deis and introduced as part of the Kubernetes 1.4 release in 2016

* Helm in a Nutshell
Helm streamlines installing and managing Kubernetes applications. 

Helm renders templates and communicates with the Kubernetes API
Helm runs wherever you want it to run.
Charts are Helm packages that contain at least two things:
- A description of the package (Chart.yaml)
- One or more templates, which contain Kubernetes manifest files
Charts can be stored on disk, or fetched from remote chart repositories 

* Why does Helm exist and what does it solve? (1)
- Improves productivity - instead of spending time on deploying test environments to test their Kubernetes clusters, developers can deploy a pre-tested app via a Helm chart and focus on developing their applications.
- Existing Helm Charts - allow developers to get a working database, big data platform, CMS, etc. deployed for their application with one click. Developers can modify existing charts or create their own to automate dev, test or production processes.
- Easier to start with Kubernetes - it can be difficult to get started with Kubernetes and learn how to deploy production-grade applications. Helm provides one click deployment of apps, making it much easier to get started and deploy your first app, even if you don't have extensive container experience.

* Why does Helm exist and what does it solve? (2)
- Reduced complexity - deployment of Kubernetes-orchestrated apps can be extremely complex. Using incorrect values in configuration files or failing to roll out apps correctly from YAML templates can break deployments. Helm Charts allow the community to preconfigure applications, defining values that are fixed and others that are configurable with sensible defaults, providing a consistent interface for changing configuration. This dramatically reduces complexity, and eliminates deployment errors by locking out incorrect configurations. 
- Production ready - running Kubernetes in production with all its components (pods, namespaces, deployments, etc.) is difficult and prone to error. With a tested, stable Helm chart, users can deploy to production with confidence, and reduce the complexity of maintaining a Kubernetes App Catalog.
- No duplicated effort - once a developer has created a chart, tested and stabilized it once, it can be reused across multiple groups in an organization and outside it. Previously, it was much more difficult (but not impossible) to share Kubernetes applications and replicate them between environments. 

* How Helm is Architected
Helm consists of two main components:

- Helm Client - allows developers to create new charts, manage chart repositories, and interact with the tiller server.
- Tiller Server - runs inside the Kubernetes cluster. Interacts with Helm client, and translates chart definitions and configuration to Kubernetes API commands. Tiller combines a chart and its configuration to build a release. Tiller is also responsible for upgrading charts, or uninstalling and deleting them from the Kubernetes cluster.

* Helm Architecture - 1
.image images/helm_arch.png

* Helm Architecture - 2
.image images/helm_arch2.png 600 600

* Fundamental Helm Operations (1)
- helm init
- helm search
- helm add repo
- helm install
- helm delete 
- helm inspect values
e.g. helm inspect values stable/mariadb
echo '{mariadbUser: user0, mariadbDatabase: user0db}' > config.yaml
helm install -f config.yaml stable/mariadb

* Fundamental Helm Operations (2)
- helm status <release_name>
- helm upgrade <release_name>
- helm rollback <release_name>
- helm list
- helm create <name>
- To fetch a chart and unpack it in a local directory, useful for inspecting, modifying or repackaging charts, run:
      helm fetch [flags] [chart URL | repo/chartname]
- To download a release on your cluster 
      helm get [flags] RELEASE_NAME

With many of these operations, you can perform them with --dry-run

* Activity: Getting Helm Setup (1)
- Note: Helm installs tiller on the kube-system namespace by default. If you need to segregate the permissions tiller has, you will need to create a tiller in separate namespaces
- Need a kubernetes cluster (Docker Desktop for local)
- Install Helm (Mac)
  Use homebrew. Make sure you install helm@2 for v2

- For non-homebrew/linux:
wget https://storage.googleapis.com/kubernetes-helm/helm-v2.12.3-linux-amd64.tar.gz
tar -zxvf helm-v2.12.3-linux-amd64.tar.gz
sudo mv linux-amd64/helm /usr/local/bin/helm

* Activity: Getting Helm Setup(2)
- Create Namespace for Tiller
  TILLER_NAMESPACE=tiller-land
  kubectl create namespace $TILLER_NAMESPACE
- Create Service Account for RBAC
  TILLER_SA=tiller-sa
  kubectl create serviceaccount $TILLER_SA --namespace $TILLER_NAMESPACE

* Activity: Getting Helm Setup(3)
- Create a role for Tiller
.code code/role.yaml
  kubectl create -f role.yaml

* Activity: Getting Helm Setup (4)
- Bind the Role to the SA
.code code/role-binding.yaml
  kubectl create -f role-binding.yaml

* Activity: Getting Helm Setup (5)
- Install Tiller
  helm init --service-account $TILLER_SA --tiller-namespace $TILLER_NAMESPACE

- Note: to use helm without tiller you can
  helm init --client-only

* Activity: Testing our install
helm install stable/nginx-ingress --tiller-namespace $TILLER_NAMESPACE --namespace $TILLER_NAMESPACE

The --tiller-namespace is the namespace, where the tiller is running and --namespace where our application will be installed. In our example these have to be the same, because tiller is only allowed to act in his namespace.

- List Releases
helm list --tiller-namespace $TILLER_NAMESPACE

- Delete Release
helm delete --tiller-namespace $TILLER_NAMESPACE NAME-OF-THE-RELEASE

* A look at all the things that make up a chart
- Chart metadata and info
- Variables
- Templates
- Dependencies

* The contents of a Chart
- Best way to learn about charts is to look at an an example
- So lets create a basic chart
  helm create my-new-helm
- Result
.image images/newchart.png 300 300

* Installation
.image images/install.png 500 500

* Checking your install
- kubectl get pods -w
- kubectl port-forward svc/my-new-helm 8888:80

* Upgrade the Chart
Add a configmap.yaml file to the templates directory
populate the configmap.yaml file with the following:
.code code/configmap.yaml

Now add this snippet to the deployment.yaml file:
.code code/deployment_snippet.yaml

* Now it is time to upgrade
    helm upgrade my-new-helm .

Now go check http://localhost:8888 to see the results

* Go Template syntax
- Now update your configmap.yaml with the following go template syntax:
    index.html: {{ .Values.pageContent }}
- Add the following to values.yaml
    pageContent: | <h1> My new Helm Template 0.0 </h1>
- Before you upgrade try:
    helm install . --dry-run --debug
This will show you what will happen at upgrade time. 

* Other tools
- You can also run (And see the result of the template output)
    helm template .
- The helm linter can be run to verify the chart as well
    helm lint .

Once satisfied, you can go ahead and run the upgrade command again and check the result.

* Static files
- Add a file called index.html in in my-new-helm/static with the following contents
    <h1>My new Helm from a file!</h1>
- Update your configmap.yaml with the following
    data: 
      {{- (.Files.Glob "static/*").AsConfig | nindent 2 }} 
- Upgrade and check the results

* Revisions
- check the revision history by running
    helm history my-new-helm
- Lets rollback to the first revision
    helm rollback my-new-helm 1
- If you want to keep history short you set that when you init
    helm init --service-account tiller --history-max 3
- Now list your Releases
    helm list
- Delete your chart
    helm delete --purge my-new-helm

* Distributing Charts
- Package your chart first
    helm package .
- Create an empty directory called "charts"
- Move your my-new-helm chart into your charts directory and run
    helm repo index .
- Create a github repo and push your chart repo
- Now you can add this repo into your helm install
    helm repo add myrepo https://raw.githubusercontent.com/jwkidd3/charts/master
- Now you can search/install directly from your repo
    helm search my-repo
    helm install -name my-new-helm myrepo/my-new-helm

* Fundamental Chart Development
In this walkthrough we will build a basic chart to explore how to put a chart together and some of the important elements.


* Your Turn

* Activity: Building your First Chart (1)
helm create <YOUR CHART NAME>

Helm helps you creating Helm charts, with the create command a directory will be created with some necessary files like the Chart.yaml, values.yaml, a templates directory ...

In the following steps I assume, that you use nginx as Chart name

Helm will add a template for a deployment, ingress & service to the templates directory, for our purposes, let's remove them, we do not want to use them.

- rm nginx/templates/deployment.yaml nginx/templates/ingress.yaml nginx/templates/service.yaml

* Activity: Building your First Chart (2)
As a reference, there is a nginx.yaml in this directory, which contains a Deployment, Service, ConfigMap & a Secret Kubernetes Manifest, try to convert this to a Helm chart.

Possible steps:
- create a file per Kubernetes entity
- use templating for often used identifiers & move them to the values.yaml
- move cross-referenced values like ports to the values.yaml
- the b64enc function could be useful for secrets
- use helm template to test your templates (maybe the first time after splitting up the manifest & before using any templating)

If you got lost, have a look in nginx-final.

* Activity: Building your First Chart (3)
- Template
If you want to test your current chart, but don't want to install it you can use the template-function:

helm template nginx/

Outputs your rendered chart with the default values.yaml If you're running Helm <= 2.7 you have to use the following command.

helm install --debug --dry-run

- Linting
Want to check if you're following the best practices, or if all your variables are set in the default values.yaml

helm lint nginx/

- Create  Github Repo and publish your solution

* Unit testing Helm Charts
- Plugins: Allow for the extension of core helm capabilities
    helm plugin install https://github.com/lrills/helm-unittest
- Create a yaml test file in tests subdirectory
.code code/deployment_test.yaml
- Your turn: Build a test for your custom chart that you built

* Other plugins of interest
- Integration testing - Helm Test
.link https://docs.helm.sh/helm/helm_test/ 
- S3 Integration (Using S3 to host a repo)
.link https://github.com/hypnoglow/helm-s3

* Helm Hooks (1)
- Helm provides a hook mechanism to allow chart developers to intervene at certain points in a releaseâ€™s life cycle
- pre-install	Executes after templates are rendered, but before any resources are created
- post-install	Executes after all resources are loaded 
- pre-delete	Executes on a deletion request before any resources are deleted from Kubernetes
- post-delete	Executes on a deletion request after all of the releaseâ€™s resources have been deleted
* Helm Hooks (2)
- pre-upgrade	Executes on an upgrade request after templates are rendered, but before any resources are updated
- post-upgrade	Executes on an upgrade after all resources have been upgraded
- pre-rollback	Executes on a rollback request after templates are rendered, but before any resources are rolled back
- post-rollback	Executes on a rollback request after all resources have been modified test Executes when the Helm test subcommand is invoked 

* Template Dependencies
- One template can declare a dependency on another
  for our purposes we will use: https://github.com/jwkidd3/helm-chart-dependency

* Go Templates
- Sprig
  http://masterminds.github.io/sprig/
- Go Templates
  https://blog.gopheracademy.com/advent-2017/using-go-templates/
- helpers
  https://helm.sh/docs/chart_template_guide/named_templates/
- Control Structures
  https://helm.sh/docs/chart_template_guide/control_structures/

* Named Templates
- There are common capabilities needed across many templates
- To facilitate this Helm uses a concept called named templates
.link https://helm.sh/docs/chart_template_guide/named_templates/

See:
.link https://github.com/jwkidd3/helm-microservices-example

* Final lab
- Create a set of charts to implement the following:
- Develop a microservice application with a python front end and a redis backend
- Make an umbrella chart adding in the front end and back end charts as dependencies
- Use the application code located here:
.link https://github.com/jwkidd3/helm_final_lab

* Best Practices when Developing Charts
.link https://helm.sh/docs/chart_best_practices/values/

* Helm 3
- Client only architecture
- No need to initialize Helm
- Chart repository status
- Helm test framework updates
- Helm 2 interface still supported
- Helm Go library overhauled

See: 
.link https://github.com/jwkidd3/helm_fundamentals

* Resources
- reference section: https://helm.sh/blog/2019-10-22-helm-2150-released